require! {
	'serializable'
	'lines-handler'
	'example'
}

{Serializable} = serializable
{LinesHandler} = lines-handler
{Example} = example





export class Entry extends Serializable
	(input) ~>
		spec = input

		# ----------------------------------------------------------------- name

		{name, title} = spec

		name ?= title

		@ <<< {name}

		# ------------------------------------------------------------------- id

		{id, key, anchor} = spec

		id ?= key

		id ?= toId name

		@ <<< {id}

		# ------------------------------------------------------------- category

		{category, group} = spec

		category ?= group

		@ <<< {category}

		# ---------------------------------------------------------- catchPhrase

		{catchPhrase, short, intro, introduction} = spec

		catchPhrase ?= short
		catchPhrase ?= intro
		catchPhrase ?= introduction

		@ <<< {catchPhrase}

		# ---------------------------------------------------------- description

		{description, desc} = spec

		description ?= desc

		@ <<< {description}

		# -------------------------------------------------------------- example

		{example, snippet, code} = spec

		example ?= snippet
		example ?= code

		example ?= ''

		@ <<< {example}

		# --------------------------------------------------------------- sample

		{sample, demo} = spec

		sample ?= demo

		@ <<< {sample}

		# Internal -------------------------------------------------------------

		@linesHandler = new LinesHandler '\n'

	io:
		html:
			serialize: ->
				{id, name, category, catchPhrase, description, example} = @

				parts = []

				parts.push """
				<hr />
					<section>
						<h3 id="#id">
							#name#{if category => " - #category" else ''}
						</h3>
				"""

				if catchPhrase? => parts.push """
						<p>
							#{@linesHandler.indent 2 catchPhrase}
						</p>
				"""

				if description? => parts.push """
						<p>
							#{@linesHandler.indent 2 description}
						</p>
				"""

				parts.push """
						<pre class="hashspace"><code>
					#{escapeHTML example}
						</code></pre>
					</section>
				"""

				@linesHandler.join parts

export toId = (string) ->
	spaceReplacement = '-'
	string .= toLowerCase!
	string .= replace /\s/g spaceReplacement
	string .= replace (new RegExp "[^a-z_#spaceReplacement]" 'g'), '_'
	string

export toHTML = (string) ->
	string .= replace (new RegExp exports.linesep, 'g'), "<br />#linesep"

export escapeHTML = (string) ->
	string .= replace />/g '&gt;'
	string .= replace /</g '&lt;'
	string
